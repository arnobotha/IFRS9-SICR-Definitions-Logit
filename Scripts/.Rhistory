label.v <- c("a_Actual"=bquote(italic(A[t])*": Actual"),
"b_PD_disc_reg"=bquote(italic(B[t])*": Expected-PD-rule (EBA)"),
"c_PD_disc_best"=bquote(italic(C[t])*": Expected-PD-rule (best)"),
"d_SICR_model_disc"=bquote(italic(D[t])*": Expected-SICR-model"))
port.aggr <- port.aggr[port.aggr$Date > "2007-01-31", ]
# - Create graph
(g <- ggplot(port.aggr, aes(x=Date, y=EventRate, group=Type)) + theme_minimal() +
labs(x="Reporting date (months)", y="Conditional SICR-rate (%)") +
theme(text=element_text(family=chosenFont),legend.position = "bottom",
axis.text.x=element_text(angle=90),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text=element_text(size=8, colour="gray50"), strip.text.y.right=element_text(angle=90)) +
# main line graph with overlaid points
geom_line(aes(colour=Type, linetype=Type), linewidth=0.4) +
geom_point(aes(colour=Type, shape=Type), size=1.2) +
#annotations
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*20,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.2f", diag.Act_PD_disc_reg),"%'"),
family=chosenFont, size=3, parse=T) +
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*17,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(C[t])*': ", sprintf("%.2f", diag.Act_PD_disc_best),"%'"),
family=chosenFont, size=3, parse=T) +
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*14,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(D[t])*': ", sprintf("%.2f", diag.Act_ExpDisc),"%'"),
family=chosenFont, size=3, parse=T) +
# facets & scale options
facet_grid(Facet_label ~ .) +
scale_colour_manual(name="", values=col.v, labels=label.v) +
scale_shape_discrete(name="", labels=label.v) + scale_linetype_discrete(name="", labels=label.v) +
#guides(colour=guide_legend(nrow=2,byrow=T)) +
scale_y_continuous(breaks=pretty_breaks(), label=percent) +
scale_x_date(date_breaks=paste0(6, " month"), date_labels = "%b %Y"))
# - Create graph
(g <- ggplot(port.aggr, aes(x=Date, y=EventRate, group=Type)) + theme_minimal() +
labs(x="Reporting date (months)", y="Conditional SICR-rate (%)") +
theme(text=element_text(family=chosenFont),legend.position = "bottom",
axis.text.x=element_text(angle=90),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text=element_text(size=8, colour="gray50"), strip.text.y.right=element_text(angle=90)) +
# main line graph with overlaid points
geom_line(aes(colour=Type, linetype=Type), linewidth=0.4) +
geom_point(aes(colour=Type, shape=Type), size=1.2) +
#annotations
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*17,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.2f", diag.Act_PD_disc_reg),"%'"),
family=chosenFont, size=3, parse=T) +
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*15,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(C[t])*': ", sprintf("%.2f", diag.Act_PD_disc_best),"%'"),
family=chosenFont, size=3, parse=T) +
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*13,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(D[t])*': ", sprintf("%.2f", diag.Act_ExpDisc),"%'"),
family=chosenFont, size=3, parse=T) +
# facets & scale options
facet_grid(Facet_label ~ .) +
scale_colour_manual(name="", values=col.v, labels=label.v) +
scale_shape_discrete(name="", labels=label.v) + scale_linetype_discrete(name="", labels=label.v) +
#guides(colour=guide_legend(nrow=2,byrow=T)) +
scale_y_continuous(breaks=pretty_breaks(), label=percent) +
scale_x_date(date_breaks=paste0(6, " month"), date_labels = "%b %Y"))
# - Save graph
ggsave(g, file=paste0(genFigPath, "TimeGraph_SICR_approaches_ActExp.png"), width=1200/dpi, height=1000/dpi, dpi=dpi, bg="white")
# - Save graph
ggsave(g, file=paste0(genFigPath, "TimeGraph_SICR_approaches_ActExp.png"), width=1200/dpi, height=1000/dpi, dpi=dpi, bg="white")
# - Create graph
(g <- ggplot(port.aggr, aes(x=Date, y=EventRate, group=Type)) + theme_minimal() +
labs(x="Reporting date (months)", y="Conditional SICR-rate (%)") +
theme(text=element_text(family=chosenFont),legend.position = "bottom",
axis.text.x=element_text(angle=90),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text=element_text(size=8, colour="gray50"), strip.text.y.right=element_text(angle=90)) +
# main line graph with overlaid points
geom_line(aes(colour=Type, linetype=Type), linewidth=0.4) +
geom_point(aes(colour=Type, shape=Type), size=1.2) +
#annotations
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*12,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.2f", diag.Act_PD_disc_reg),"%'"),
family=chosenFont, size=3, parse=T) +
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*11,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(C[t])*': ", sprintf("%.2f", diag.Act_PD_disc_best),"%'"),
family=chosenFont, size=3, parse=T) +
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*10,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(D[t])*': ", sprintf("%.2f", diag.Act_ExpDisc),"%'"),
family=chosenFont, size=3, parse=T) +
# facets & scale options
facet_grid(Facet_label ~ .) +
scale_colour_manual(name="", values=col.v, labels=label.v) +
scale_shape_discrete(name="", labels=label.v) + scale_linetype_discrete(name="", labels=label.v) +
#guides(colour=guide_legend(nrow=2,byrow=T)) +
scale_y_continuous(breaks=pretty_breaks(), label=percent) +
scale_x_date(date_breaks=paste0(6, " month"), date_labels = "%b %Y"))
# - Save graph
ggsave(g, file=paste0(genFigPath, "TimeGraph_SICR_approaches_ActExp.png"), width=1200/dpi, height=1000/dpi, dpi=dpi, bg="white")
View(port.aggr)
# =================================== SETUP ====================================
# Preparing runtime environment and setting parameters
# ------------------------------------------------------------------------------
# PROJECT TITLE: Dynamic SICR-research
# SCRIPT AUTHOR(S): Dr Arno Botha, Esmerelda Oberholzer
# DESCRIPTION:
# This script installs and loads various libraries and packages, compiles all
# custom functions, and set requisite parameters.
# The versions of the packages installed are provided in the README-file.
# ------------------------------------------------------------------------------
# -- Inputs:
#   - 0a.Custom_Functions.R | Custom function definitions and helper functions
#   - DelinqM.R | Delinquency measures and related functions
# ==============================================================================
# --------------------------------- PACKAGES -----------------------------------
# ------ Install and load packages
# - data access and big data management
require(haven) # for SAS imports
require(ETLUtils)
require(ffbase)
require(ff)
require(writexl)
#require(arrow)
tempPath <- "C:/TempData"; options("fftempdir"=tempPath)
# - for data wrangling
require(tidyr)
require(dplyr)
require(data.table)
require(lubridate)
require(readr)
require(bit64) # for very big numeric values
require(stringr) # common string operations, e.g., str_pad
# - for analyses
require(Hmisc) # for describe()
require(moments) # for using skewness() function
#for plots
require(ggplot2)
require(scales)
require(ggthemes)
require(extrafont) #remotes::install_version("Rttf2pt1", version = "1.3.8"); Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.55.0/bin/gswin32c.exe"); font_import(); loadfonts(); loadfonts(device="win")
require(RColorBrewer)
require(gridExtra)
#for modelling
require(car)
require(MASS) # for stepAIC() for stepwise regression
require(e1071) # for SVM-technique
require(mlr) # for parallelized SMV-technique and associated tuning tools
require(parallelMap); require(parallel) # for multithreaded SVM-tuning using the mlr-package
require(pROC); require(ROCR) # both for conducting ROC-analyses
require(DEoptimR)
# for explainability measures
require(DALEX)
require(ranger)
require(fastshap)
# --------------------------------- GENERAL ------------------------------------
# ------ Parametrisation
# - general R options
options(scipen=999) # Suppress showing scientific notation
# - Parameters used in calculating delinquency measures
sc.Thres <- 0.9; # repayment ratio - g1
d <- 3 # default threshold for g0/g1-measures of delinquency (payments in arrears)
k <- 6 # Probation period
# -- Path variables | General
# - Common path for saving big data objects
genPath <- "C:/Data/Dynamic-SICR_Data/"
# - Common path for importing raw data
genRawPath <- "C:/Data/"
# -- Path variables | User-dependent
if (Sys.getenv("USERNAME") == "WRQ") {
# - Custom path where R-scripts are saved
path_cust <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Figures/"
} else if (Sys.getenv("USERNAME") == "Arno Botha") {
# - Custom path where R-scripts are saved
path_cust <- "E:/WorkLife/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "E:/WorkLife/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "E:/WorkLife/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Figures/"
# - Common path for saving big data objects
genPath <- "E:/DataDump/FNB SLC/Dynamic-SICR_Data/"
# - Common path for importing raw data
genRawPath <- "E:/DataDump/FNB SLC/"
} else if (Sys.getenv("USERNAME") == "f5361079") {
# - Custom path where R-scripts are saved
# - Custom path where R-scripts are saved
path_cust <- "C:/Users/F5361079/GitHub/IFRS9-SICR-Definitions-Logit/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "C:/Users/F5361079/GitHub/IFRS9-SICR-Definitions-Logit/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "C:/Users/F5361079/GitHub/IFRS9-SICR-Definitions-Logit/Figures/"
} else {
stop("User-specific paths not set for current user: ", Sys.getenv("USERNAME"), ". Please fix in Setup script (0.Setup.R) before continuing")
}
# ----------------------------- CUSTOM FUNCTIONS -------------------------------
# ------ Custom function definitions
# - Load all custom functions defined in a separate R-script
source(paste0(path_cust,"0a.Custom_Functions.R"))
# - Compile Delinquency Calculation Functions (CD, MD/DoD)
source(paste0(path_cust,'DelinqM.R'))
# ------ 0. Setup/load models
# --- a) Logit models
SICR_label <- "1a(i)"
if(!exists('logit_model_chosen')) unpack.ffdf(paste0(genPath, "logit_model_", SICR_label), tempPath)
logit_model_1a_i <- logit_model_chosen; rm(logit_model_chosen)
SICR_label <- "1a(ii)"
if(!exists('logit_model_chosen')) unpack.ffdf(paste0(genPath, "logit_model_", SICR_label), tempPath)
logit_model_1a_ii <- logit_model_chosen; rm(logit_model_chosen)
SICR_label <- "1a(iii)"
if(!exists('logit_model_chosen')) unpack.ffdf(paste0(genPath, "logit_model_", SICR_label), tempPath)
logit_model_1a_iii <- logit_model_chosen; rm(logit_model_chosen)
SICR_label <- "1a(iv)"
if(!exists('logit_model_chosen')) unpack.ffdf(paste0(genPath, "logit_model_", SICR_label), tempPath)
logit_model_1a_iv <- logit_model_chosen; rm(logit_model_chosen)
# --- b) Datasets
SICR_label <- "1a(i)"
if (!exists('datSICR_smp')) unpack.ffdf(paste0(genPath,"datSICR_smp_", SICR_label), tempPath)
dat_SICR_1a_i <- copy(datSICR_smp); rm(datSICR_smp)
SICR_label <- "1a(ii)"
if (!exists('datSICR_smp')) unpack.ffdf(paste0(genPath,"datSICR_smp_", SICR_label), tempPath)
dat_SICR_1a_ii <- copy(datSICR_smp); rm(datSICR_smp)
SICR_label <- "1a(iii)"
if (!exists('datSICR_smp')) unpack.ffdf(paste0(genPath,"datSICR_smp_", SICR_label), tempPath)
dat_SICR_1a_iii <- copy(datSICR_smp); rm(datSICR_smp)
SICR_label <- "1a(iv)"
if (!exists('datSICR_smp')) unpack.ffdf(paste0(genPath,"datSICR_smp_", SICR_label), tempPath)
dat_SICR_1a_iv <- copy(datSICR_smp); rm(datSICR_smp)
View(dat_SICR_1a_i)
View(dat_SICR_1a_i)
View(dat_SICR_1a_ii)
varKeep <- c(# Delinquency-theme inputs
"g0_Delinq", "PerfSpell_Num", "TimeInPerfSpell", "slc_acct_roll_ever_24_imputed", "slc_acct_arr_dir_3",
# Credit-themed inputs
"BalanceLog", "Term", "InterestRate_Margin", "pmnt_method_grp", "slc_acct_pre_lim_perc_imputed",
# Macroeconomic-themed inputs
"M_Repo_Rate", "M_Inflation_Growth", "M_DTI_Growth", "M_DTI_Growth_12", "M_RealGDP_Growth",
# PD-ratio
"PD_ratio"
)
# 1a(i)
inputs_SICR_1a_i <- subset(dat_SICR_1a_i, select=varKeep)
# 1a(ii)
inputs_SICR_1a_ii <- subset(dat_SICR_1a_ii, select=varKeep)
# 1a(iii)
inputs_SICR_1a_iii <- subset(dat_SICR_1a_iii, select=varKeep)
# 1a(iv)
inputs_SICR_1a_iv <- subset(dat_SICR_1a_iv, select=varKeep)
# graphing parameters
chosenFont <- "Cambria"
dpi <- 250
# - Set the seed to ensure reproducability
set.seed(1051)
# 1a(i)
ptm <- proc.time()
((exp_all_ia_i <- explain(logit_model_1a_i, X = inputs_SICR_1a_i, nsim = 10, adjust = TRUE,  pred_wrapper = predict)))
autoplot(exp_all_ia_i)
# 1a(ii)
ptm <- proc.time()
((exp_all_ia_ii <- explain(logit_model_1a_ii, X = inputs_SICR_1a_ii, nsim = 10, adjust = TRUE,  pred_wrapper = predict)))
autoplot(exp_all_ia_ii)
# 1a(iii)
ptm <- proc.time()
((exp_all_ia_iii <- explain(logit_model_1a_iii, X = inputs_SICR_1a_iii, nsim = 10, adjust = TRUE,  pred_wrapper = predict)))
autoplot(exp_all_ia_iii)
# 1a(iv)
ptm <- proc.time()
((exp_all_ia_iv <- explain(logit_model_1a_iv, X = inputs_SICR_1a_iv, nsim = 10, adjust = TRUE,  pred_wrapper = predict)))
autoplot(exp_all_ia_iv)
# =================================== SETUP ====================================
# Preparing runtime environment and setting parameters
# ------------------------------------------------------------------------------
# PROJECT TITLE: Dynamic SICR-research
# SCRIPT AUTHOR(S): Dr Arno Botha, Esmerelda Oberholzer
# DESCRIPTION:
# This script installs and loads various libraries and packages, compiles all
# custom functions, and set requisite parameters.
# The versions of the packages installed are provided in the README-file.
# ------------------------------------------------------------------------------
# -- Inputs:
#   - 0a.Custom_Functions.R | Custom function definitions and helper functions
#   - DelinqM.R | Delinquency measures and related functions
# ==============================================================================
# --------------------------------- PACKAGES -----------------------------------
# ------ Install and load packages
# - data access and big data management
require(haven) # for SAS imports
require(ETLUtils)
require(ffbase)
require(ff)
require(writexl)
#require(arrow)
tempPath <- "C:/TempData"; options("fftempdir"=tempPath)
# - for data wrangling
require(tidyr)
require(dplyr)
require(data.table)
require(lubridate)
require(readr)
require(bit64) # for very big numeric values
require(stringr) # common string operations, e.g., str_pad
# - for analyses
require(Hmisc) # for describe()
require(moments) # for using skewness() function
#for plots
require(ggplot2)
require(scales)
require(ggthemes)
require(extrafont) #remotes::install_version("Rttf2pt1", version = "1.3.8"); Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.55.0/bin/gswin32c.exe"); font_import(); loadfonts(); loadfonts(device="win")
require(RColorBrewer)
require(gridExtra)
#for modelling
require(car)
require(MASS) # for stepAIC() for stepwise regression
require(e1071) # for SVM-technique
require(mlr) # for parallelized SMV-technique and associated tuning tools
require(parallelMap); require(parallel) # for multithreaded SVM-tuning using the mlr-package
require(pROC); require(ROCR) # both for conducting ROC-analyses
require(DEoptimR)
# for explainability measures
require(DALEX)
require(ranger)
require(fastshap)
# --------------------------------- GENERAL ------------------------------------
# ------ Parametrisation
# - general R options
options(scipen=999) # Suppress showing scientific notation
# - Parameters used in calculating delinquency measures
sc.Thres <- 0.9; # repayment ratio - g1
d <- 3 # default threshold for g0/g1-measures of delinquency (payments in arrears)
k <- 6 # Probation period
# -- Path variables | General
# - Common path for saving big data objects
genPath <- "C:/Data/Dynamic-SICR_Data/"
# - Common path for importing raw data
genRawPath <- "C:/Data/"
# -- Path variables | User-dependent
if (Sys.getenv("USERNAME") == "WRQ") {
# - Custom path where R-scripts are saved
path_cust <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Figures/"
} else if (Sys.getenv("USERNAME") == "Arno Botha") {
# - Custom path where R-scripts are saved
path_cust <- "E:/WorkLife/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "E:/WorkLife/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "E:/WorkLife/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Figures/"
# - Common path for saving big data objects
genPath <- "E:/DataDump/FNB SLC/Dynamic-SICR_Data/"
# - Common path for importing raw data
genRawPath <- "E:/DataDump/FNB SLC/"
} else if (Sys.getenv("USERNAME") == "f5361079") {
# - Custom path where R-scripts are saved
# - Custom path where R-scripts are saved
path_cust <- "C:/Users/F5361079/GitHub/IFRS9-SICR-Definitions-Logit/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "C:/Users/F5361079/GitHub/IFRS9-SICR-Definitions-Logit/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "C:/Users/F5361079/GitHub/IFRS9-SICR-Definitions-Logit/Figures/"
} else {
stop("User-specific paths not set for current user: ", Sys.getenv("USERNAME"), ". Please fix in Setup script (0.Setup.R) before continuing")
}
# ----------------------------- CUSTOM FUNCTIONS -------------------------------
# ------ Custom function definitions
# - Load all custom functions defined in a separate R-script
source(paste0(path_cust,"0a.Custom_Functions.R"))
# - Compile Delinquency Calculation Functions (CD, MD/DoD)
source(paste0(path_cust,'DelinqM.R'))
SICR_label <- "1a(i)"
if(!exists('logit_model_chosen')) unpack.ffdf(paste0(genPath, "logit_model_", SICR_label), tempPath)
logit_model_1a_i <- logit_model_chosen; rm(logit_model_chosen)
SICR_label <- "1a(ii)"
if(!exists('logit_model_chosen')) unpack.ffdf(paste0(genPath, "logit_model_", SICR_label), tempPath)
logit_model_1a_ii <- logit_model_chosen; rm(logit_model_chosen)
SICR_label <- "1a(iii)"
if(!exists('logit_model_chosen')) unpack.ffdf(paste0(genPath, "logit_model_", SICR_label), tempPath)
logit_model_1a_iii <- logit_model_chosen; rm(logit_model_chosen)
SICR_label <- "1a(iv)"
if(!exists('logit_model_chosen')) unpack.ffdf(paste0(genPath, "logit_model_", SICR_label), tempPath)
logit_model_1a_iv <- logit_model_chosen; rm(logit_model_chosen)
datGraph_1a_i <- varImport_logit(logit_model_1a_i, method="stdCoef_Goodman", sig_level=0.1, impPlot=F)$data
datGraph_1a_ii <- varImport_logit(logit_model_1a_ii, method="stdCoef_Goodman", sig_level=0.1, impPlot=F)$data
datGraph_1a_iii <- varImport_logit(logit_model_1a_iii, method="stdCoef_Goodman", sig_level=0.1, impPlot=F)$data
datGraph_1a_iv <- varImport_logit(logit_model_1a_iv, method="stdCoef_Goodman", sig_level=0.1, impPlot=F)$data
chosenFont <- "Cambria"; dpi <- 200; colPalette <- "BrBG"
vLabel <- c("g0_Delinq"="g0-Delinq", "slc_acct_roll_ever_24_imputed"="RollEver-24m",
"slc_acct_arr_dir_3SAME"="ArrearsDir-SAME", "slc_acct_arr_dir_3ROLLING"="ArrearsDir-ROLLING",
"pmnt_method_grpStatement"="PayMethod-STATEMENT", "slc_acct_pre_lim_perc_imputed"="Prepaid-Perc",
"InterestRate_Margin"="InterestRate_Margin", "slc_acct_arr_dir_3MISSING_DATA"="ArrearsDir-MISSING",
"M_Repo_Rate"="Repo_Rate", "BalanceLog" = "Balance", "pmnt_method_grpSalary/Suspense" = "PayMethod-SALARY/SUSPENSE",
"pmnt_method_grpMISSING_DATA" = "PayMethod-MISSING", "M_RealGDP_Growth" = "RealGDP_Growth", "M_DTI_Growth" = "DTI_Growth",
"PerfSpell_Num" = "PerfSpell_Num", "Term" = "Term")
sumVarImport <- sum(datGraph_1a_i$Value_Abs, na.rm=T)
# - Create graph
(g <- ggplot(datGraph_1a_i, aes(x=reorder(Variable, Value_Abs))) + theme_minimal() +
theme(text=element_text(family=chosenFont), legend.position=c(0.8,0.6)) +
labs(x="Variable name", y="Standardised coefficients: Goodman") +
geom_col(aes(y=Value_Abs, fill=Value_Abs)) +
geom_label(aes(y=sumVarImport*0.05, label=paste(percent(Contribution, accuracy=0.1)), fill=Value_Abs), family=chosenFont) +
annotate(geom="text", x=datGraph_1a_i[.N, Variable], y=max(datGraph_1a_i$Value_Abs, na.rm=T)*0.75, family=chosenFont, size=3,
label=paste0("Variable Importance (sum): ", comma(sumVarImport, accuracy=0.1))) +
scale_fill_distiller(palette=colPalette, name="Absolute value", direction=1) +
scale_colour_distiller(palette=colPalette, name="Absolute value", direction=1) +
scale_x_discrete(labels=vLabel) + coord_flip())
ggsave(g, file=paste0(genFigPath, "VariableImportance_stdCoef_Goodman_1a_i.png"), width=1200/dpi, height=1000/dpi, dpi=dpi, bg="white")
datGraph_1a_ii <- varImport_logit(logit_model_1a_ii, method="stdCoef_Goodman", sig_level=0.1, impPlot=F)$data
chosenFont <- "Cambria"; dpi <- 200; colPalette <- "BrBG"
vLabel <- c("g0_Delinq"="g0-Delinq", "slc_acct_roll_ever_24_imputed"="RollEver-24m",
"slc_acct_arr_dir_3SAME"="ArrearsDir-SAME", "pmnt_method_grpStatement"="PayMethod-STATEMENT",
"slc_acct_arr_dir_3ROLLING"="ArrearsDir-ROLLING", "slc_acct_pre_lim_perc_imputed"="Prepaid-Perc",
"InterestRate_Margin"="InterestRate_Margin", "BalanceLog" = "Balance",
"slc_acct_arr_dir_3MISSING_DATA"="ArrearsDir-MISSING", "M_DTI_Growth" = "DTI_Growth",
"M_DTI_Growth_12" = "DTI_Growth_12", "pmnt_method_grpSalary/Suspense" = "PayMethod-SALARY/SUSPENSE",
"PerfSpell_Num" = "PerfSpell_Num", "M_Repo_Rate"="Repo_Rate", "pmnt_method_grpMISSING_DATA" = "PayMethod-MISSING",
"TimeInPerfSpell" = "TimeInPerfSpell", "M_RealGDP_Growth" = "RealGDP_Growth", "M_Inflation_Growth" = "Inflation_Growth")
# - Calculate contribution degrees to sum of importance measure across all variables
# NOTE: These contributions are merely ancillary and for graphing purposes.
# They should not considered too seriously, unless studied more extensively.
sumVarImport <- sum(datGraph_1a_i$Value_Abs, na.rm=T)
# - Create graph
(g <- ggplot(datGraph_1a_i, aes(x=reorder(Variable, Value_Abs))) + theme_minimal() +
theme(text=element_text(family=chosenFont), legend.position=c(0.8,0.6)) +
labs(x="Variable name", y="Standardised coefficients: Goodman") +
geom_col(aes(y=Value_Abs, fill=Value_Abs)) +
geom_label(aes(y=sumVarImport*0.05, label=paste(percent(Contribution, accuracy=0.1)), fill=Value_Abs), family=chosenFont) +
annotate(geom="text", x=datGraph_1a_i[.N, Variable], y=max(datGraph_1a_i$Value_Abs, na.rm=T)*0.75, family=chosenFont, size=3,
label=paste0("Variable Importance (sum): ", comma(sumVarImport, accuracy=0.1))) +
scale_fill_distiller(palette=colPalette, name="Absolute value", direction=1) +
scale_colour_distiller(palette=colPalette, name="Absolute value", direction=1) +
scale_x_discrete(labels=vLabel) + coord_flip())
# - Def 1a(ii)
# - Aesthetic engineering
chosenFont <- "Cambria"; dpi <- 200; colPalette <- "BrBG"
vLabel <- c("g0_Delinq"="g0-Delinq", "slc_acct_roll_ever_24_imputed"="RollEver-24m",
"slc_acct_arr_dir_3SAME"="ArrearsDir-SAME", "pmnt_method_grpStatement"="PayMethod-STATEMENT",
"slc_acct_arr_dir_3ROLLING"="ArrearsDir-ROLLING", "slc_acct_pre_lim_perc_imputed"="Prepaid-Perc",
"InterestRate_Margin"="InterestRate_Margin", "BalanceLog" = "Balance",
"slc_acct_arr_dir_3MISSING_DATA"="ArrearsDir-MISSING", "M_DTI_Growth" = "DTI_Growth",
"M_DTI_Growth_12" = "DTI_Growth_12", "pmnt_method_grpSalary/Suspense" = "PayMethod-SALARY/SUSPENSE",
"PerfSpell_Num" = "PerfSpell_Num", "M_Repo_Rate"="Repo_Rate", "pmnt_method_grpMISSING_DATA" = "PayMethod-MISSING",
"TimeInPerfSpell" = "TimeInPerfSpell", "M_RealGDP_Growth" = "RealGDP_Growth", "M_Inflation_Growth" = "Inflation_Growth")
# - Calculate contribution degrees to sum of importance measure across all variables
# NOTE: These contributions are merely ancillary and for graphing purposes.
# They should not considered too seriously, unless studied more extensively.
sumVarImport <- sum(datGraph_1a_ii$Value_Abs, na.rm=T)
# - Create graph
(g <- ggplot(datGraph_1a_ii, aes(x=reorder(Variable, Value_Abs))) + theme_minimal() +
theme(text=element_text(family=chosenFont), legend.position=c(0.8,0.6)) +
labs(x="Variable name", y="Standardised coefficients: Goodman") +
geom_col(aes(y=Value_Abs, fill=Value_Abs)) +
geom_label(aes(y=sumVarImport*0.05, label=paste(percent(Contribution, accuracy=0.1)), fill=Value_Abs), family=chosenFont) +
annotate(geom="text", x=datGraph_1a_ii[.N, Variable], y=max(datGraph_1a_ii$Value_Abs, na.rm=T)*0.75, family=chosenFont, size=3,
label=paste0("Variable Importance (sum): ", comma(sumVarImport, accuracy=0.1))) +
scale_fill_distiller(palette=colPalette, name="Absolute value", direction=1) +
scale_colour_distiller(palette=colPalette, name="Absolute value", direction=1) +
scale_x_discrete(labels=vLabel) + coord_flip())
# - Save graph
ggsave(g, file=paste0(genFigPath, "VariableImportance_stdCoef_Goodman_1a_ii.png"), width=1200/dpi, height=1000/dpi, dpi=dpi, bg="white")
datGraph_1a_iii <- varImport_logit(logit_model_1a_iii, method="stdCoef_Goodman", sig_level=0.1, impPlot=F)$data
# - Aesthetic engineering
chosenFont <- "Cambria"; dpi <- 200; colPalette <- "BrBG"
vLabel <- c("g0_Delinq"="g0-Delinq", "slc_acct_roll_ever_24_imputed"="RollEver-24m",
"slc_acct_arr_dir_3SAME"="ArrearsDir-SAME", "pmnt_method_grpStatement"="PayMethod-STATEMENT",
"InterestRate_Margin"="InterestRate_Margin", "slc_acct_pre_lim_perc_imputed"="Prepaid-Perc",
"slc_acct_arr_dir_3ROLLING"="ArrearsDir-ROLLING", "M_DTI_Growth" = "DTI_Growth", "BalanceLog" = "Balance",
"M_DTI_Growth_12" = "DTI_Growth_12", "PerfSpell_Num" = "PerfSpell_Num", "slc_acct_arr_dir_3MISSING_DATA"="ArrearsDir-MISSING",
"TimeInPerfSpell" = "TimeInPerfSpell", "pmnt_method_grpSalary/Suspense" = "PayMethod-SALARY/SUSPENSE",
"M_Repo_Rate"="Repo_Rate", "M_RealGDP_Growth" = "RealGDP_Growth", "pmnt_method_grpMISSING_DATA" = "PayMethod-MISSING")
# - Calculate contribution degrees to sum of importance measure across all variables
# NOTE: These contributions are merely ancillary and for graphing purposes.
# They should not considered too seriously, unless studied more extensively.
sumVarImport <- sum(datGraph_1a_iii$Value_Abs, na.rm=T)
# - Create graph
(g <- ggplot(datGraph_1a_iii, aes(x=reorder(Variable, Value_Abs))) + theme_minimal() +
theme(text=element_text(family=chosenFont), legend.position=c(0.8,0.6)) +
labs(x="Variable name", y="Standardised coefficients: Goodman") +
geom_col(aes(y=Value_Abs, fill=Value_Abs)) +
geom_label(aes(y=sumVarImport*0.05, label=paste(percent(Contribution, accuracy=0.1)), fill=Value_Abs), family=chosenFont) +
annotate(geom="text", x=datGraph_1a_iii[.N, Variable], y=max(datGraph_1a_iii$Value_Abs, na.rm=T)*0.75, family=chosenFont, size=3,
label=paste0("Variable Importance (sum): ", comma(sumVarImport, accuracy=0.1))) +
scale_fill_distiller(palette=colPalette, name="Absolute value", direction=1) +
scale_colour_distiller(palette=colPalette, name="Absolute value", direction=1) +
scale_x_discrete(labels=vLabel) + coord_flip())
# - Save graph
ggsave(g, file=paste0(genFigPath, "VariableImportance_stdCoef_Goodman_1a_iii.png"), width=1200/dpi, height=1000/dpi, dpi=dpi, bg="white")
datGraph_1a_iv <- varImport_logit(logit_model_1a_iv, method="stdCoef_Goodman", sig_level=0.1, impPlot=F)$data
# - Def 1a(iv)
# - Aesthetic engineering
chosenFont <- "Cambria"; dpi <- 200; colPalette <- "BrBG"
vLabel <- c("g0_Delinq"="g0-Delinq", "slc_acct_roll_ever_24_imputed"="RollEver-24m",
"pmnt_method_grpStatement"="PayMethod-STATEMENT", "slc_acct_arr_dir_3SAME"="ArrearsDir-SAME",
"slc_acct_pre_lim_perc_imputed"="Prepaid-Perc", "InterestRate_Margin"="InterestRate_Margin",
"BalanceLog" = "Balance", "slc_acct_arr_dir_3ROLLING"="ArrearsDir-ROLLING", "M_DTI_Growth" = "DTI_Growth",
"M_DTI_Growth_12" = "DTI_Growth_12", "PerfSpell_Num" = "PerfSpell_Num", "slc_acct_arr_dir_3MISSING_DATA"="ArrearsDir-MISSING",
"pmnt_method_grpMISSING_DATA" = "PayMethod-MISSING", "pmnt_method_grpSalary/Suspense" = "PayMethod-SALARY/SUSPENSE",
"TimeInPerfSpell" = "TimeInPerfSpell", "M_Repo_Rate"="Repo_Rate", "Term" = "Term")
# - Calculate contribution degrees to sum of importance measure across all variables
# NOTE: These contributions are merely ancillary and for graphing purposes.
# They should not considered too seriously, unless studied more extensively.
sumVarImport <- sum(datGraph_1a_iv$Value_Abs, na.rm=T)
# - Create graph
(g <- ggplot(datGraph_1a_iv, aes(x=reorder(Variable, Value_Abs))) + theme_minimal() +
theme(text=element_text(family=chosenFont), legend.position=c(0.8,0.6)) +
labs(x="Variable name", y="Standardised coefficients: Goodman") +
geom_col(aes(y=Value_Abs, fill=Value_Abs)) +
geom_label(aes(y=sumVarImport*0.05, label=paste(percent(Contribution, accuracy=0.1)), fill=Value_Abs), family=chosenFont) +
annotate(geom="text", x=datGraph_1a_iv[.N, Variable], y=max(datGraph_1a_iv$Value_Abs, na.rm=T)*0.75, family=chosenFont, size=3,
label=paste0("Variable Importance (sum): ", comma(sumVarImport, accuracy=0.1))) +
scale_fill_distiller(palette=colPalette, name="Absolute value", direction=1) +
scale_colour_distiller(palette=colPalette, name="Absolute value", direction=1) +
scale_x_discrete(labels=vLabel) + coord_flip())
# - Save graph
ggsave(g, file=paste0(genFigPath, "VariableImportance_stdCoef_Goodman_1a_iv.png"), width=1200/dpi, height=1000/dpi, dpi=dpi, bg="white")
