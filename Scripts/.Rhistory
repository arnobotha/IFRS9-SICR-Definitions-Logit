cut_off_raw = logistic_cutoff,
AUC_discrete = c(round(pROC_obj_chosena$auc,digits=1)),
CI_lower_discrete = c(round(pROC_obj_chosena$ci[1],digits=2)),
CI_upper_discrete = c(round(pROC_obj_chosena$ci[3],digits=2)),
std_dev = c(standard_deviation),
tpr = c(true_positive_rate),
tnr = c(true_negative_rate),
MAE_Act_ExpDisc = round(diag.Act_ExpDisc, digits=2),
MAE_Act_ExpProb = round(diag.Act_ExpProb, digits=2),
std_dev_SICR_rate_Act = round(stdev_SICR_Act, digits=4),
std_dev_SICR_rate_ExpDisc = round(stdev_SICR_ExpDisc, digits=4),
std_dev_SICR_rate_ExpProb = round(stdev_SICR_ExpProb, digits=4),
OverPredict_ExpDisc = round(overPredictDegree_disc,digits=5),
OverPredict_ExpProb = round(overPredictDegree_prob,digits=5),
stringsAsFactors = FALSE)
pack.ffdf(paste0(genPath, "performance_measures_", SICR_label), performance_measures_2c_iv); gc()
# --- 7.2 Trained logit model
pack.ffdf(paste0(genPath, "logit_model_", SICR_label), logit_model_chosen); gc()
# =================================== SETUP ====================================
# Preparing runtime environment and setting parameters
# ------------------------------------------------------------------------------
# PROJECT TITLE: Dynamic SICR-research
# SCRIPT AUTHOR(S): Esmerelda Oberholzer, Dr Arno Botha
# DESCRIPTION:
# This script installs and loads various libraries and packages, compiles all
# custom functions, and set requisite parameters.
# The versions of the packages installed are provided in the README-file.
# ------------------------------------------------------------------------------
# -- Inputs:
#   - 0a.Custom_Functions.R | Custom function definitions and helper functions
#   - 0b.findOptimalCutoff.R | Custom functions to aid threshold-selection for logit-models
#   - DelinqM.R | Delinquency measures and related functions
# ==============================================================================
# --------------------------------- PACKAGES -----------------------------------
# ------ Install and load packages
# - data access and big data management
require(haven) # for SAS imports
require(ETLUtils)
require(ffbase)
require(ff)
require(writexl)
#require(arrow)
tempPath <- "C:/TempData"; options("fftempdir"=tempPath)
# - for data wrangling
require(tidyr)
require(dplyr)
require(data.table)
require(lubridate)
require(readr)
require(bit64) # for very big numeric values
require(stringr) # common string operations, e.g., str_pad
# - for analyses
require(Hmisc) # for describe()
require(moments) # for using skewness() function
#for plots
require(ggplot2)
require(scales)
require(ggthemes)
require(extrafont) #remotes::install_version("Rttf2pt1", version = "1.3.8"); Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.55.0/bin/gswin32c.exe"); font_import(); loadfonts(); loadfonts(device="win")
require(RColorBrewer)
require(gridExtra)
#for modelling
require(car)
require(MASS) # for stepAIC() for stepwise regression
require(e1071) # for SVM-technique
require(mlr) # for parallelized SMV-technique and associated tuning tools
require(parallelMap); require(parallel) # for multithreaded SVM-tuning using the mlr-package
require(pROC); require(ROCR) # both for conducting ROC-analyses
require(DEoptimR)
# for explainability measures
require(DALEX)
require(ranger)
require(fastshap)
# --------------------------------- GENERAL ------------------------------------
# ------ Parametrisation
# - general R options
options(scipen=999) # Suppress showing scientific notation
# - Parameters used in calculating delinquency measures
sc.Thres <- 0.9; # repayment ratio - g1
d <- 3 # default threshold for g0/g1-measures of delinquency (payments in arrears)
k <- 6 # Probation period
# -- Path variables | General
# - Common path for saving big data objects
genPath <- "C:/Data/Dynamic-SICR_Data/"
# - Common path for importing raw data
genRawPath <- "C:/Data/"
# -- Path variables | User-dependent
if (Sys.getenv("USERNAME") == "WRQ") {
# - Custom path where R-scripts are saved
path_cust <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Figures/"
} else if (Sys.getenv("USERNAME") == "Arno Botha") {
# - Custom path where R-scripts are saved
path_cust <- "E:/WorkLife/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "E:/WorkLife/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "E:/WorkLife/Analytix/Research/Dynamic-SICR/IFRS9-SICR-Definitions-Logit/Figures/"
# - Common path for saving big data objects
genPath <- "E:/DataDump/FNB SLC/Dynamic-SICR_Data/"
# - Common path for importing raw data
genRawPath <- "E:/DataDump/FNB SLC/"
} else if (Sys.getenv("USERNAME") == "f5361079") {
# - Custom path where R-scripts are saved
# - Custom path where R-scripts are saved
path_cust <- "C:/Users/F5361079/GitHub/IFRS9-SICR-Definitions-Logit/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "C:/Users/F5361079/GitHub/IFRS9-SICR-Definitions-Logit/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "C:/Users/F5361079/GitHub/IFRS9-SICR-Definitions-Logit/Figures/"
} else {
stop("User-specific paths not set for current user: ", Sys.getenv("USERNAME"), ". Please fix in Setup script (0.Setup.R) before continuing")
}
# ----------------------------- CUSTOM FUNCTIONS -------------------------------
# ------ Custom function definitions
# - Load all custom functions defined in a separate R-script
source(paste0(path_cust,"0a.Custom_Functions.R"))
# - Compile Delinquency Calculation Functions (CD, MD/DoD)
source(paste0(path_cust,'DelinqM.R'))
# ------ 0. Setup/parameter definition
# - Graphing parameters
chosenFont <- "Cambria"
dpi <- 180
# - Define SICR-definition label
SICR_label <- "1b(iii)"
# - Unpack the saved dataset that contains the required PD-ratio, as well as the predicted SICR-outcome
if (!exists('datSICR_smp')) unpack.ffdf(paste0(genPath,"datSICR_smp_", SICR_label), tempPath)
View(datSICR_smp)
datSICR_smp[, PD_Disc := ifelse(PD_ratio >= 2, 1, 0)]
View(datSICR_smp)
View(datSICR_smp)
View(datSICR_smp)
auc(datSICR_smp$SICR_target, datSICR_smp$ExpDisc) # 73.66%
auc(datSICR_smp$SICR_target, datSICR_smp$PD_Disc) # 73.94%
# - Implement the EBA-suggested 200% threshold
datSICR_smp[, PD_Disc := ifelse(PD_ratio >= 1.5, 1, 0)]
# - Calculate the AUC
auc(datSICR_smp$SICR_target, datSICR_smp$ExpDisc) # 76.75%
auc(datSICR_smp$SICR_target, datSICR_smp$PD_Disc) # 51.51%
# - Implement the EBA-suggested 200% threshold
datSICR_smp[, PD_Disc := ifelse(PD_ratio >= 1.2, 1, 0)]
# - Calculate the AUC
auc(datSICR_smp$SICR_target, datSICR_smp$ExpDisc) # 76.75%
auc(datSICR_smp$SICR_target, datSICR_smp$PD_Disc) # 51.51%
# - Implement the EBA-suggested 200% threshold
datSICR_smp[, PD_Disc := ifelse(PD_ratio >= 3, 1, 0)]
# - Calculate the AUC
auc(datSICR_smp$SICR_target, datSICR_smp$ExpDisc) # 76.75%
auc(datSICR_smp$SICR_target, datSICR_smp$PD_Disc) # 51.51%
# - Implement the EBA-suggested 200% threshold
datSICR_smp[, PD_Disc := ifelse(PD_ratio >= 1.5, 1, 0)]
# - Calculate the AUC
auc(datSICR_smp$SICR_target, datSICR_smp$ExpDisc) # 76.75%
auc(datSICR_smp$SICR_target, datSICR_smp$PD_Disc) # 51.51%
View(datSICR_smp)
datCompare_graph <- rbind(datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=SICR_target , Type="a_Actual")],
datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=PD_Disc, Type="b_PD_disc")],
datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=ExpDisc, Type="c_SICR_model_disc")])
View(datCompare_graph)
# - Transform factor back to numeric variables for aggregation purposes
datSICR_graph[, SICR_events := as.numeric(levels(SICR_events))[SICR_events]]
# - Transform factor back to numeric variables for aggregation purposes
datCompare_graph[, SICR_events := as.numeric(levels(SICR_events))[SICR_events]]
# - Aggregate to monthly level and observe up to given point
SICR_StartDte <- min(datSICR_smp$Date, na.rm=T)
SICR_EndDte <- max(datSICR_smp$Date, na.rm=T)
port.aggr <- datCompare_graph[SICR_def==0, list(EventRate = sum(SICR_events, na.rm=T)/.N, AtRisk = .N),
by=list(Type, Date)][Date >= SICR_StartDte & Date <= SICR_EndDte,] %>% setkey(Type,Date)
View(port.aggr)
# - Aesthetics engineering
port.aggr[, Facet_label := "Compare SICR-approaches"]
# - Calculate MAE over time by line graph type in summarising differences amongst line graphs
port.aggr2 <- port.aggr %>% pivot_wider(id_cols = c(Date), names_from = c(Type), values_from = c(EventRate))
(diag.Act_PD_disc <- mean(abs(port.aggr2$a_Actual - port.aggr2$b_PD_disc)) * 100)
(diag.Act_ExpDisc <- mean(abs(port.aggr2$a_Actual - port.aggr2$c_SICR_model_disc)) * 100)
View(port.aggr2)
View(port.aggr2)
# - Calculate standard deviation of these processes
stdev_SICR_Act <- sd(port.aggr2$a_Actual, na.rm=T)
stdev_SICR_PD_disc <- sd(port.aggr2$b_PD_disc, na.rm=T)
stdev_SICR_ExpDisc <- sd(port.aggr2$c_SICR_model_disc, na.rm=T)
overPredictDegree_PD_disc <- sum(port.aggr2$b_PD_disc>=port.aggr2$a_Actual)/length(port.aggr2$b_PD_disc)
overPredictDegree_ExpDisc <- sum(port.aggr2$c_SICR_model_disc>=port.aggr2$a_Actual)/length(port.aggr2$c_SICR_model_disc)
# - Graphing parameters
col.v <- brewer.pal(5, "Dark2")
label.v <- c("a_Actual"=bquote(italic(A[t])*": Actual"),
"b_PD_disc"=bquote(italic(B[t])*": Expected-PD-rule"),
"c_SICR_model_disc"=bquote(italic(C[t])*": Expected-SICR-model"))
# - Create graph
(g <- ggplot(port.aggr, aes(x=Date, y=EventRate, group=Type)) + theme_minimal() +
labs(x="Reporting date (months)", y="Conditional SICR-rate (%)") +
theme(text=element_text(family=chosenFont),legend.position = "bottom",
axis.text.x=element_text(angle=90),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text=element_text(size=8, colour="gray50"), strip.text.y.right=element_text(angle=90)) +
# main line graph with overlaid points
geom_line(aes(colour=Type, linetype=Type), linewidth=0.4) +
geom_point(aes(colour=Type, shape=Type), size=1.2) +
#annotations
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*2.8,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.2f", diag.Act_PD_disc),"%'"),
family=chosenFont, size=3, parse=T) +
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*2.3,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(C[t])*': ", sprintf("%.2f", diag.Act_ExpDisc),"%'"),
family=chosenFont, size=3, parse=T) +
# facets & scale options
facet_grid(Facet_label ~ .) +
scale_colour_manual(name="", values=col.v, labels=label.v) +
scale_shape_discrete(name="", labels=label.v) + scale_linetype_discrete(name="", labels=label.v) +
#guides(colour=guide_legend(nrow=2,byrow=T)) +
scale_y_continuous(breaks=pretty_breaks(), label=percent) +
scale_x_date(date_breaks=paste0(6, " month"), date_labels = "%b %Y"))
# - Implement a threshold
datSICR_smp[, PD_Disc := ifelse(PD_ratio >= 2, 1, 0)]
# - Calculate the AUC
auc(datSICR_smp$SICR_target, datSICR_smp$ExpDisc) # 76.75%
auc(datSICR_smp$SICR_target, datSICR_smp$PD_Disc) # 59.91%
# On a 200% threshold, the AUC is 51.51%, not much better than flipping a random coin
# On a 150% threshold, the AUC is 59.91%, which at least shows some predictive power
# On a 120% threshold, the AUC is 60.75%, only slightly better than 150%
# On a 300% threshold, the AUC is 51.02%, not much better than flipping a random coin
# As the threshold becomes smaller, the AUC improves and vice versa
# ------ 2. Portfolio Analytics
# --- 1. Comparison of actual vs predicted SICR-outcomes
# - Structure different line series together
datCompare_graph <- rbind(datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=SICR_target , Type="a_Actual")],
datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=PD_Disc, Type="b_PD_disc")],
datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=ExpDisc, Type="c_SICR_model_disc")])
# - Transform factor back to numeric variables for aggregation purposes
datCompare_graph[, SICR_events := as.numeric(levels(SICR_events))[SICR_events]]
# - Aggregate to monthly level and observe up to given point
SICR_StartDte <- min(datSICR_smp$Date, na.rm=T)
SICR_EndDte <- max(datSICR_smp$Date, na.rm=T)
port.aggr <- datCompare_graph[SICR_def==0, list(EventRate = sum(SICR_events, na.rm=T)/.N, AtRisk = .N),
by=list(Type, Date)][Date >= SICR_StartDte & Date <= SICR_EndDte,] %>% setkey(Type,Date)
# - Aesthetics engineering
port.aggr[, Facet_label := "Compare SICR-approaches"]
# - Calculate MAE over time by line graph type in summarising differences amongst line graphs
port.aggr2 <- port.aggr %>% pivot_wider(id_cols = c(Date), names_from = c(Type), values_from = c(EventRate))
(diag.Act_PD_disc <- mean(abs(port.aggr2$a_Actual - port.aggr2$b_PD_disc)) * 100)
(diag.Act_ExpDisc <- mean(abs(port.aggr2$a_Actual - port.aggr2$c_SICR_model_disc)) * 100)
# - Calculate standard deviation of these processes
stdev_SICR_Act <- sd(port.aggr2$a_Actual, na.rm=T)
stdev_SICR_PD_disc <- sd(port.aggr2$b_PD_disc, na.rm=T)
stdev_SICR_ExpDisc <- sd(port.aggr2$c_SICR_model_disc, na.rm=T)
# - Calculate so-called risk prudence degree to measure the degree to which the expected default rate exceeds the actual default rate over time
overPredictDegree_PD_disc <- sum(port.aggr2$b_PD_disc>=port.aggr2$a_Actual)/length(port.aggr2$b_PD_disc)
overPredictDegree_ExpDisc <- sum(port.aggr2$c_SICR_model_disc>=port.aggr2$a_Actual)/length(port.aggr2$c_SICR_model_disc)
# - Graphing parameters
col.v <- brewer.pal(5, "Dark2")
label.v <- c("a_Actual"=bquote(italic(A[t])*": Actual"),
"b_PD_disc"=bquote(italic(B[t])*": Expected-PD-rule"),
"c_SICR_model_disc"=bquote(italic(C[t])*": Expected-SICR-model"))
# - Create graph
(g <- ggplot(port.aggr, aes(x=Date, y=EventRate, group=Type)) + theme_minimal() +
labs(x="Reporting date (months)", y="Conditional SICR-rate (%)") +
theme(text=element_text(family=chosenFont),legend.position = "bottom",
axis.text.x=element_text(angle=90),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text=element_text(size=8, colour="gray50"), strip.text.y.right=element_text(angle=90)) +
# main line graph with overlaid points
geom_line(aes(colour=Type, linetype=Type), linewidth=0.4) +
geom_point(aes(colour=Type, shape=Type), size=1.2) +
#annotations
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*2.8,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.2f", diag.Act_PD_disc),"%'"),
family=chosenFont, size=3, parse=T) +
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*2.3,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(C[t])*': ", sprintf("%.2f", diag.Act_ExpDisc),"%'"),
family=chosenFont, size=3, parse=T) +
# facets & scale options
facet_grid(Facet_label ~ .) +
scale_colour_manual(name="", values=col.v, labels=label.v) +
scale_shape_discrete(name="", labels=label.v) + scale_linetype_discrete(name="", labels=label.v) +
#guides(colour=guide_legend(nrow=2,byrow=T)) +
scale_y_continuous(breaks=pretty_breaks(), label=percent) +
scale_x_date(date_breaks=paste0(6, " month"), date_labels = "%b %Y"))
datSICR_smp[, PD_Disc := ifelse(PD_ratio >= 1.8, 1, 0)]
# - Calculate the AUC
auc(datSICR_smp$SICR_target, datSICR_smp$ExpDisc) # 76.75%
auc(datSICR_smp$SICR_target, datSICR_smp$PD_Disc) # 59.91%
# - Implement a threshold
datSICR_smp[, PD_Disc := ifelse(PD_ratio >= 1.5, 1, 0)]
# - Calculate the AUC
auc(datSICR_smp$SICR_target, datSICR_smp$ExpDisc) # 76.75%
auc(datSICR_smp$SICR_target, datSICR_smp$PD_Disc) # 59.91%
### RESULTS:
# On a 200% threshold, the AUC is 51.51%, not much better than flipping a random coin
# On a 180% threshold, the AUC is 56.48%, slightly better than flipping a random coin
# On a 150% threshold, the AUC is 59.91%, which at least shows some predictive power
# On a 120% threshold, the AUC is 60.75%, only slightly better than 150%
# On a 300% threshold, the AUC is 51.02%, not much better than flipping a random coin
# As the threshold becomes smaller, the AUC improves and vice versa
# ------ 2. Portfolio Analytics
# --- 1. Comparison of actual vs predicted SICR-outcomes
# - Structure different line series together
datCompare_graph <- rbind(datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=SICR_target , Type="a_Actual")],
datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=PD_Disc, Type="b_PD_disc")],
datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=ExpDisc, Type="c_SICR_model_disc")])
# - Transform factor back to numeric variables for aggregation purposes
datCompare_graph[, SICR_events := as.numeric(levels(SICR_events))[SICR_events]]
# - Aggregate to monthly level and observe up to given point
SICR_StartDte <- min(datSICR_smp$Date, na.rm=T)
SICR_EndDte <- max(datSICR_smp$Date, na.rm=T)
port.aggr <- datCompare_graph[SICR_def==0, list(EventRate = sum(SICR_events, na.rm=T)/.N, AtRisk = .N),
by=list(Type, Date)][Date >= SICR_StartDte & Date <= SICR_EndDte,] %>% setkey(Type,Date)
# - Aesthetics engineering
port.aggr[, Facet_label := "Compare SICR-approaches"]
# - Calculate MAE over time by line graph type in summarising differences amongst line graphs
port.aggr2 <- port.aggr %>% pivot_wider(id_cols = c(Date), names_from = c(Type), values_from = c(EventRate))
(diag.Act_PD_disc <- mean(abs(port.aggr2$a_Actual - port.aggr2$b_PD_disc)) * 100)
(diag.Act_ExpDisc <- mean(abs(port.aggr2$a_Actual - port.aggr2$c_SICR_model_disc)) * 100)
# - Calculate standard deviation of these processes
stdev_SICR_Act <- sd(port.aggr2$a_Actual, na.rm=T)
stdev_SICR_PD_disc <- sd(port.aggr2$b_PD_disc, na.rm=T)
stdev_SICR_ExpDisc <- sd(port.aggr2$c_SICR_model_disc, na.rm=T)
# - Calculate so-called risk prudence degree to measure the degree to which the expected default rate exceeds the actual default rate over time
overPredictDegree_PD_disc <- sum(port.aggr2$b_PD_disc>=port.aggr2$a_Actual)/length(port.aggr2$b_PD_disc)
overPredictDegree_ExpDisc <- sum(port.aggr2$c_SICR_model_disc>=port.aggr2$a_Actual)/length(port.aggr2$c_SICR_model_disc)
# - Graphing parameters
col.v <- brewer.pal(5, "Dark2")
label.v <- c("a_Actual"=bquote(italic(A[t])*": Actual"),
"b_PD_disc"=bquote(italic(B[t])*": Expected-PD-rule"),
"c_SICR_model_disc"=bquote(italic(C[t])*": Expected-SICR-model"))
# - Create graph
(g <- ggplot(port.aggr, aes(x=Date, y=EventRate, group=Type)) + theme_minimal() +
labs(x="Reporting date (months)", y="Conditional SICR-rate (%)") +
theme(text=element_text(family=chosenFont),legend.position = "bottom",
axis.text.x=element_text(angle=90),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text=element_text(size=8, colour="gray50"), strip.text.y.right=element_text(angle=90)) +
# main line graph with overlaid points
geom_line(aes(colour=Type, linetype=Type), linewidth=0.4) +
geom_point(aes(colour=Type, shape=Type), size=1.2) +
#annotations
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*2.8,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.2f", diag.Act_PD_disc),"%'"),
family=chosenFont, size=3, parse=T) +
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*2.3,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(C[t])*': ", sprintf("%.2f", diag.Act_ExpDisc),"%'"),
family=chosenFont, size=3, parse=T) +
# facets & scale options
facet_grid(Facet_label ~ .) +
scale_colour_manual(name="", values=col.v, labels=label.v) +
scale_shape_discrete(name="", labels=label.v) + scale_linetype_discrete(name="", labels=label.v) +
#guides(colour=guide_legend(nrow=2,byrow=T)) +
scale_y_continuous(breaks=pretty_breaks(), label=percent) +
scale_x_date(date_breaks=paste0(6, " month"), date_labels = "%b %Y"))
# - Implement a threshold
datSICR_smp[, PD_Disc := ifelse(PD_ratio >= 1.8, 1, 0)]
# - Calculate the AUC
auc(datSICR_smp$SICR_target, datSICR_smp$ExpDisc) # 76.75%
auc(datSICR_smp$SICR_target, datSICR_smp$PD_Disc) # 59.91%
### RESULTS:
# On a 200% threshold, the AUC is 51.51%, not much better than flipping a random coin
# On a 180% threshold, the AUC is 56.48%, slightly better than flipping a random coin
# On a 150% threshold, the AUC is 59.91%, which at least shows some predictive power
# On a 120% threshold, the AUC is 60.75%, only slightly better than 150%
# On a 300% threshold, the AUC is 51.02%, not much better than flipping a random coin
# As the threshold becomes smaller, the AUC improves and vice versa
# ------ 2. Portfolio Analytics
# --- 1. Comparison of actual vs predicted SICR-outcomes
# - Structure different line series together
datCompare_graph <- rbind(datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=SICR_target , Type="a_Actual")],
datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=PD_Disc, Type="b_PD_disc")],
datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=ExpDisc, Type="c_SICR_model_disc")])
# - Transform factor back to numeric variables for aggregation purposes
datCompare_graph[, SICR_events := as.numeric(levels(SICR_events))[SICR_events]]
# - Aggregate to monthly level and observe up to given point
SICR_StartDte <- min(datSICR_smp$Date, na.rm=T)
SICR_EndDte <- max(datSICR_smp$Date, na.rm=T)
port.aggr <- datCompare_graph[SICR_def==0, list(EventRate = sum(SICR_events, na.rm=T)/.N, AtRisk = .N),
by=list(Type, Date)][Date >= SICR_StartDte & Date <= SICR_EndDte,] %>% setkey(Type,Date)
# - Aesthetics engineering
port.aggr[, Facet_label := "Compare SICR-approaches"]
# - Calculate MAE over time by line graph type in summarising differences amongst line graphs
port.aggr2 <- port.aggr %>% pivot_wider(id_cols = c(Date), names_from = c(Type), values_from = c(EventRate))
(diag.Act_PD_disc <- mean(abs(port.aggr2$a_Actual - port.aggr2$b_PD_disc)) * 100)
(diag.Act_ExpDisc <- mean(abs(port.aggr2$a_Actual - port.aggr2$c_SICR_model_disc)) * 100)
# - Calculate standard deviation of these processes
stdev_SICR_Act <- sd(port.aggr2$a_Actual, na.rm=T)
stdev_SICR_PD_disc <- sd(port.aggr2$b_PD_disc, na.rm=T)
stdev_SICR_ExpDisc <- sd(port.aggr2$c_SICR_model_disc, na.rm=T)
# - Calculate so-called risk prudence degree to measure the degree to which the expected default rate exceeds the actual default rate over time
overPredictDegree_PD_disc <- sum(port.aggr2$b_PD_disc>=port.aggr2$a_Actual)/length(port.aggr2$b_PD_disc)
overPredictDegree_ExpDisc <- sum(port.aggr2$c_SICR_model_disc>=port.aggr2$a_Actual)/length(port.aggr2$c_SICR_model_disc)
# - Graphing parameters
col.v <- brewer.pal(5, "Dark2")
label.v <- c("a_Actual"=bquote(italic(A[t])*": Actual"),
"b_PD_disc"=bquote(italic(B[t])*": Expected-PD-rule"),
"c_SICR_model_disc"=bquote(italic(C[t])*": Expected-SICR-model"))
# - Create graph
(g <- ggplot(port.aggr, aes(x=Date, y=EventRate, group=Type)) + theme_minimal() +
labs(x="Reporting date (months)", y="Conditional SICR-rate (%)") +
theme(text=element_text(family=chosenFont),legend.position = "bottom",
axis.text.x=element_text(angle=90),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text=element_text(size=8, colour="gray50"), strip.text.y.right=element_text(angle=90)) +
# main line graph with overlaid points
geom_line(aes(colour=Type, linetype=Type), linewidth=0.4) +
geom_point(aes(colour=Type, shape=Type), size=1.2) +
#annotations
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*2.8,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.2f", diag.Act_PD_disc),"%'"),
family=chosenFont, size=3, parse=T) +
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*2.3,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(C[t])*': ", sprintf("%.2f", diag.Act_ExpDisc),"%'"),
family=chosenFont, size=3, parse=T) +
# facets & scale options
facet_grid(Facet_label ~ .) +
scale_colour_manual(name="", values=col.v, labels=label.v) +
scale_shape_discrete(name="", labels=label.v) + scale_linetype_discrete(name="", labels=label.v) +
#guides(colour=guide_legend(nrow=2,byrow=T)) +
scale_y_continuous(breaks=pretty_breaks(), label=percent) +
scale_x_date(date_breaks=paste0(6, " month"), date_labels = "%b %Y"))
# - Implement a threshold
datSICR_smp[, PD_Disc := ifelse(PD_ratio >= 2, 1, 0)]
# - Calculate the AUC
auc(datSICR_smp$SICR_target, datSICR_smp$ExpDisc) # 76.75%
auc(datSICR_smp$SICR_target, datSICR_smp$PD_Disc) # 59.91%
### RESULTS:
# On a 200% threshold, the AUC is 51.51%, not much better than flipping a random coin
# On a 180% threshold, the AUC is 56.48%, slightly better than flipping a random coin
# On a 150% threshold, the AUC is 59.91%, which at least shows some predictive power
# On a 120% threshold, the AUC is 60.75%, only slightly better than 150%
# On a 300% threshold, the AUC is 51.02%, not much better than flipping a random coin
# As the threshold becomes smaller, the AUC improves and vice versa
# ------ 2. Portfolio Analytics
# --- 1. Comparison of actual vs predicted SICR-outcomes
# - Structure different line series together
datCompare_graph <- rbind(datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=SICR_target , Type="a_Actual")],
datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=PD_Disc, Type="b_PD_disc")],
datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=ExpDisc, Type="c_SICR_model_disc")])
# - Transform factor back to numeric variables for aggregation purposes
datCompare_graph[, SICR_events := as.numeric(levels(SICR_events))[SICR_events]]
# - Aggregate to monthly level and observe up to given point
SICR_StartDte <- min(datSICR_smp$Date, na.rm=T)
SICR_EndDte <- max(datSICR_smp$Date, na.rm=T)
port.aggr <- datCompare_graph[SICR_def==0, list(EventRate = sum(SICR_events, na.rm=T)/.N, AtRisk = .N),
by=list(Type, Date)][Date >= SICR_StartDte & Date <= SICR_EndDte,] %>% setkey(Type,Date)
# - Aesthetics engineering
port.aggr[, Facet_label := "Compare SICR-approaches"]
# - Calculate MAE over time by line graph type in summarising differences amongst line graphs
port.aggr2 <- port.aggr %>% pivot_wider(id_cols = c(Date), names_from = c(Type), values_from = c(EventRate))
(diag.Act_PD_disc <- mean(abs(port.aggr2$a_Actual - port.aggr2$b_PD_disc)) * 100)
(diag.Act_ExpDisc <- mean(abs(port.aggr2$a_Actual - port.aggr2$c_SICR_model_disc)) * 100)
# - Calculate standard deviation of these processes
stdev_SICR_Act <- sd(port.aggr2$a_Actual, na.rm=T)
stdev_SICR_PD_disc <- sd(port.aggr2$b_PD_disc, na.rm=T)
stdev_SICR_ExpDisc <- sd(port.aggr2$c_SICR_model_disc, na.rm=T)
# - Calculate so-called risk prudence degree to measure the degree to which the expected default rate exceeds the actual default rate over time
overPredictDegree_PD_disc <- sum(port.aggr2$b_PD_disc>=port.aggr2$a_Actual)/length(port.aggr2$b_PD_disc)
overPredictDegree_ExpDisc <- sum(port.aggr2$c_SICR_model_disc>=port.aggr2$a_Actual)/length(port.aggr2$c_SICR_model_disc)
# - Graphing parameters
col.v <- brewer.pal(5, "Dark2")
label.v <- c("a_Actual"=bquote(italic(A[t])*": Actual"),
"b_PD_disc"=bquote(italic(B[t])*": Expected-PD-rule"),
"c_SICR_model_disc"=bquote(italic(C[t])*": Expected-SICR-model"))
# - Create graph
(g <- ggplot(port.aggr, aes(x=Date, y=EventRate, group=Type)) + theme_minimal() +
labs(x="Reporting date (months)", y="Conditional SICR-rate (%)") +
theme(text=element_text(family=chosenFont),legend.position = "bottom",
axis.text.x=element_text(angle=90),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text=element_text(size=8, colour="gray50"), strip.text.y.right=element_text(angle=90)) +
# main line graph with overlaid points
geom_line(aes(colour=Type, linetype=Type), linewidth=0.4) +
geom_point(aes(colour=Type, shape=Type), size=1.2) +
#annotations
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*2.8,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(B[t])*': ", sprintf("%.2f", diag.Act_PD_disc),"%'"),
family=chosenFont, size=3, parse=T) +
annotate(geom="text", x=as.Date("2015-12-31"), y=port.aggr[Date >= "2012-12-31" & Type=="a_Actual", mean(EventRate)]*2.3,
label=paste0("'MAE between '*italic(A[t])*' and '*italic(C[t])*': ", sprintf("%.2f", diag.Act_ExpDisc),"%'"),
family=chosenFont, size=3, parse=T) +
# facets & scale options
facet_grid(Facet_label ~ .) +
scale_colour_manual(name="", values=col.v, labels=label.v) +
scale_shape_discrete(name="", labels=label.v) + scale_linetype_discrete(name="", labels=label.v) +
#guides(colour=guide_legend(nrow=2,byrow=T)) +
scale_y_continuous(breaks=pretty_breaks(), label=percent) +
scale_x_date(date_breaks=paste0(6, " month"), date_labels = "%b %Y"))
# - Implement a threshold based on the EBA-recommended threshold and the best performing threshold based on the AUC
datSICR_smp[, PD_Disc_reg := ifelse(PD_ratio >= 2, 1, 0)]
datSICR_smp[, PD_Disc_best := ifelse(PD_ratio >= 1.2, 1, 0)]
# - Calculate the AUC
auc(datSICR_smp$SICR_target, datSICR_smp$ExpDisc) # 76.75%
auc(datSICR_smp$SICR_target, datSICR_smp$PD_Disc_reg) # 59.91%
auc(datSICR_smp$SICR_target, datSICR_smp$PD_Disc_best) # 59.91%
# - Structure different line series together
datCompare_graph <- rbind(datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=SICR_target, Type="a_Actual")],
datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=PD_Disc_reg, Type="b_PD_disc_reg")],
datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=PD_Disc_best, Type="c_PD_disc_best")],
datSICR_smp[, list(LoanID, Date, SICR_def, SICR_events=ExpDisc, Type="d_SICR_model_disc")])
# - Transform factor back to numeric variables for aggregation purposes
datCompare_graph[, SICR_events := as.numeric(levels(SICR_events))[SICR_events]]
# - Aggregate to monthly level and observe up to given point
SICR_StartDte <- min(datSICR_smp$Date, na.rm=T)
SICR_EndDte <- max(datSICR_smp$Date, na.rm=T)
port.aggr <- datCompare_graph[SICR_def==0, list(EventRate = sum(SICR_events, na.rm=T)/.N, AtRisk = .N),
by=list(Type, Date)][Date >= SICR_StartDte & Date <= SICR_EndDte,] %>% setkey(Type,Date)
# - Aesthetics engineering
port.aggr[, Facet_label := "Compare SICR-approaches"]
port.aggr2 <- port.aggr %>% pivot_wider(id_cols = c(Date), names_from = c(Type), values_from = c(EventRate))
# - Calculate MAE over time by line graph type in summarising differences amongst line graphs
port.aggr2 <- port.aggr %>% pivot_wider(id_cols = c(Date), names_from = c(Type), values_from = c(EventRate))
(diag.Act_PD_disc_reg <- mean(abs(port.aggr2$a_Actual - port.aggr2$b_PD_disc_reg)) * 100)
(diag.Act_PD_disc_best <- mean(abs(port.aggr2$a_Actual - port.aggr2$c_PD_disc_best)) * 100)
(diag.Act_ExpDisc <- mean(abs(port.aggr2$a_Actual - port.aggr2$d_SICR_model_disc)) * 100)
